#pragma config(Sensor, in6,    SwingPot,       sensorPotentiometer)
#pragma config(Sensor, in8,    MogoPot,        sensorPotentiometer)
#pragma config(Sensor, dgtl1,  LeftEnc,        sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  RightEnc,       sensorQuadEncoder)
#pragma config(Sensor, dgtl5,  Claw,           sensorDigitalOut)
#pragma config(Motor,  port2,           LeftFrontDrive, tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           RightFrontDrive, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           LeftLift,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           RightLift,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           Roller,         tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port7,           Mogo,          tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port8,           LeftRearDrive, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           RightRearDrive, tmotorVex393_MC29, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"
//PROTOTYPES
void autoStack();
void drivePID(int driveDistance);
void turnLeft(int driveDistance);
void turnRight(int driveDistance);

//GLOBALS
int liftHeight = 0;

task liftToHeight()
{
	int error = 0;
	error = liftHeight - SensorValue[SwingPot];
	while(true)
	{
		error = liftHeight - SensorValue[SwingPot];
		motor[LeftLift] = error/5;
		motor[RightLift] = error/5;
		wait1Msec(15);

	}
}

task mogoDown()
{
	while(SensorValue[MogoPot] < 3500)
	{
		motor[Mogo] = -127;	
		wait1Msec(20);
	}
	motor[Mogo] = -20;
	wait1Msec(20);
}

task mogoUp()
{
	while(SensorValue[MogoPot] > 880)
	{
		motor[Mogo] = 127;
		wait1Msec(20);
	}
	motor[Mogo] = 0;
	wait1Msec(20);
}

void pre_auton()
{
	bStopTasksBetweenModes = true;
}

task autonomous()
{
	//drop onto stationary goal
	drivePID(-80);
	drivePID(80);
	motor[LeftFrontDrive] = 20;
	motor[LeftRearDrive] = 20;
	motor[RightFrontDrive] = 20;
	motor[RightRearDrive] = 20;
	wait1Msec(500);
	
	// turn left
	drivePID(-42);
	turnRight(38);

	//drive forward
	drivePID(100);

	//mogo out
	startTask(mogoDown);
	
	//turn right
	turnRight(32);

	//drive forward
	drivePID(170);

	//mogo in
	stopTask(mogoDown);
	startTask(mogoUp);
	wait1Msec(1000);
	stopTask(mogoUp);

	//drive back
	drivePID(-90);

	//turn right
	turnRight(63);

	//back up
	drivePID(-20);

	//autostack
	autoStack();
}

void autoStack()
{
int grabHeight = 3950;
int armDrop[5] = {250, 400, 500, 650, 800};

//hug wall while stacking to preventing rocking
motor[LeftFrontDrive] = -20;
motor[LeftRearDrive] = -20;
motor[RightFrontDrive] = -20;
motor[RightRearDrive] = -20;

for(int i = 0; i < 5; i++)
{

	//drop Roller down to grab height to grab cone
	while(SensorValue[SwingPot] < grabHeight)
	{
		if(SensorValue[SwingPot] < 2000)
		{
			motor[Roller] = -60;
		}
		else
		{
			motor[Roller] = 127;
		}
		motor[LeftLift] = 127;
		motor[RightLift] = 127;
	}

	//Roller back over to arm drop height
	//slow down roller at certain height to 60
	while(SensorValue[SwingPot] > armDrop[i])
	{

		//right side determines drop height
		if(SensorValue[SwingPot] > armDrop[i] + 400)
		{
			motor[Roller] = 30;
			motor[LeftLift] = -127;
			motor[RightLift] = -127;
		}
		else
		{

			//release cone
			motor[Roller] = -127;
		}
	}

	//kill switch
	if(vexRT[Btn6D] == 1)
	{
		i = 5;
	}
}
}

void turnRight(int driveDistance)
{
int error = 0;
int speed = 0;
SensorValue[LeftEnc] = 0;

//while not turned far enough
while(SensorValue[LeftEnc] < driveDistance)
{
	//calculate how far from goal distance you are
	error = driveDistance - SensorValue[LeftEnc];

	//if close to goal, keep going but slow down
	if(error > 250)
	{
		speed = error/2;
		motor[LeftFrontDrive] = speed / 3;
		motor[LeftRearDrive] = speed / 3;
		motor[RightFrontDrive] = -speed / 3;
		motor[RightRearDrive] = -speed / 3;
	}
	//otherise go constant reasonable speed
	else
	{
		motor[LeftFrontDrive] = 100 / 3;
		motor[LeftRearDrive] = 100 / 3;
		motor[RightFrontDrive] = -100 / 3;
		motor[RightRearDrive] = -100 / 3;
	}
}
//brake slighty to remove inertia
motor[LeftFrontDrive] = -25;
motor[LeftRearDrive] = -25;
motor[RightFrontDrive] = 25;
motor[RightRearDrive] = 25;

wait1Msec(200);

//stop completely to shift more easily into a new task
motor[LeftFrontDrive] = 0;
motor[LeftRearDrive] = 0;
motor[RightFrontDrive] = 0;
motor[RightRearDrive] = 0;

wait1Msec(200);
}

void turnLeft(int driveDistance)

{
int error = 0;
int speed = 0;
SensorValue[RightEnc] = 0;
while(SensorValue[RightEnc] < driveDistance)
{
	error = driveDistance - SensorValue[RightEnc];
	if(error > 250)
	{
		speed = error/2;
		motor[LeftFrontDrive] = -speed / 3;
		motor[LeftRearDrive] = -speed / 3;
		motor[RightFrontDrive] = speed / 3;
		motor[RightRearDrive] = speed / 3;
	}
	else
	{
		motor[LeftFrontDrive] = -100 / 3;
		motor[LeftRearDrive] = -100 / 3;
		motor[RightFrontDrive] = 100 / 3;
		motor[RightRearDrive] = 100 / 3;
	}
}
motor[LeftFrontDrive] = 25;
motor[LeftRearDrive] = 25;
motor[RightFrontDrive] = -25;
motor[RightRearDrive] = -25;

wait1Msec(200);

motor[LeftFrontDrive] = 0;
motor[LeftRearDrive] = 0;
motor[RightFrontDrive] = 0;
motor[RightRearDrive] = 0;

wait1Msec(200);
}

void drivePID(int driveDistance)
{
int errorRight = 0;
int prevErrorRight = 0;
int errorLeft = 0;
int prevErrorLeft = 0;
int integralRight = 0;
int integralLeft = 0;
int derivativeRight = 0;
int derivativeLeft = 0;
int speedRight;
int speedLeft;
float kP = .9;
float kI = .00001;
float kD = .005;

//values for turn
/*float kP = .1;
float kI = .0003;
float kD = .005;
*/
SensorValue[LeftEnc] = 0;
SensorValue[RightEnc] = 0;


errorRight = driveDistance - SensorValue[RightEnc];
prevErrorRight = driveDistance - SensorValue[RightEnc];
errorLeft = driveDistance - SensorValue[LeftEnc];
prevErrorLeft = driveDistance - SensorValue[LeftEnc];

while ( abs(errorRight) > 10 && abs(errorLeft) > 10 )
{
	errorLeft = driveDistance - SensorValue[LeftEnc];
	errorRight = driveDistance - SensorValue[RightEnc];
	integralRight = integralRight + errorRight;
	integralLeft = integralLeft + errorLeft;
	if (errorLeft == 0 || errorRight == 0)
	{
		integralRight = 0;
		integralLeft = 0;
	}
	derivativeRight = errorRight - prevErrorRight;
	prevErrorRight = errorRight;
	derivativeLeft = errorLeft - prevErrorLeft;
	prevErrorLeft = errorLeft;

	speedRight = errorRight*kP + integralRight*kI + derivativeRight*kD;
	speedLeft = errorLeft * kP + integralLeft*kI + derivativeLeft*kD;
	
	
	if(abs(speedRight) < 60 && speedRight < 0)
	{
		speedRight = -60;
	}
		else if(abs(speedRight) < 60 && speedRight > 0)
	{
		speedRight = 60;
	}
	
		if(abs(speedLeft) < 60 && speedLeft < 0)
	{
		speedLeft = -60;
	}
		else if(abs(speedLeft) < 60 && speedLeft > 0)
	{
		speedLeft = 60;
	}
	
	motor[LeftFrontDrive] = speedLeft / 2;
	motor[RightFrontDrive] = speedRight / 2;
	motor[LeftRearDrive] = speedLeft / 2;
	motor[RightRearDrive] = speedRight / 2;

	wait1Msec(15);
}

//run in reverse for a bit to make sure movement
//is stopped
/*
motor[LeftFrontDrive] = -25;
motor[RightFrontDrive] = -25;
motor[LeftRearDrive] = -25;
motor[RightRearDrive] = -25;
wait1Msec(400);
*/


//kill motors
motor[LeftFrontDrive] = 0;
motor[RightFrontDrive] = 0;
motor[LeftRearDrive] = 0;
motor[RightRearDrive] = 0;
wait1Msec(500);
return;
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task usercontrol()
{
// User control code here, inside the loop
int y;
int x;
int threshhigh = 100;
int threshlow = 20;
int speed;

while (true)
{

	// make joystick move far enough before using values
	if(abs(vexRT[Ch3]) >= threshhigh)
	{
		y = vexRT[Ch3] * .8;
	}
	else if(abs(vexRT[Ch3]) <= threshlow)
	{
		y = 0;
	}
	else
	{
		y = vexRT[Ch3];
	}
	// make joystick move far enough before using values
	if(abs(vexRT[Ch1]) >= threshhigh)
	{
		x = vexRT[Ch1] * .8;
	}
	else if(abs(vexRT[Ch1]) <= threshlow)
	{
		x = 0;
	}

	else
	{
		x = vexRT[Ch1];
	}


	if(vexRT[Btn5U] == 1)
	{
		motor[LeftFrontDrive] = x/3 + y/2;
		motor[RightFrontDrive] = -x/3 + y/2;
		motor[LeftRearDrive] = x/3 + y/2;
		motor[RightRearDrive] = -x/3 + y/2;
	}
	else
	{
		motor[LeftFrontDrive] = x + y;
		motor[RightFrontDrive] = -x + y;
		motor[LeftRearDrive] = x + y;
		motor[RightRearDrive] = -x + y;
	}

	speed = 2600 - SensorValue[SwingPot];
	motor[LeftLift] = speed * 0.05;
	motor[RightLift] = speed * 0.05;
	motor[Roller] = -40;



	if(vexRT[Btn8U] == 1)
	{
		stopTask(mogoUp);
		startTask(mogoDown);
	}
	else if(vexRT[Btn8D] == 1)
	{
		stopTask(mogoDown);
		startTask(mogoUp);
	}

	if(vexRT[Btn6U] == 1)
	{
		autoStack();
	}

	wait1Msec(20);
}
}
